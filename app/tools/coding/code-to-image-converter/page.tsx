'use client'
import React, { useState, useRef, useCallback, useEffect } from 'react';
import { 
  Card, 
  CardBody,
  Button,
  Input,
  Select,
  SelectItem,
  Slider,
  Switch,
  Tabs,
  Tab,
  ModalContent,
  Modal
} from "@nextui-org/react";
import { toast } from 'react-hot-toast';
import { 
  Download, 
  Maximize2, 
  X, 
  Copy, 
  RefreshCw, 
  Info, 
  BookOpen, 
  Lightbulb,
  Settings,
  Palette,
} from 'lucide-react';
import * as prismStyles from 'react-syntax-highlighter/dist/esm/styles/prism';
import { toPng, toJpeg, toSvg } from 'html-to-image';
import ToolLayout from '@/components/ToolLayout';
import CodePreview, { WatermarkPosition } from './CodePreview';

// Import your constants
import { languages } from './languages';
import { themes } from './themes';
import { gradients } from './gradients';
import { fontFamilies } from './fonts';


type BackgroundType = 'none' | 'gradient' | 'solid' | 'image';
type ExportFormat = 'png' | 'jpeg' | 'svg';


function CodeToImageConverter() {
  // State management (same as before)
  const [language, setLanguage] = useState(languages[0].value);
  const [theme, setTheme] = useState(themes[0].value);
  const [fileName, setFileName] = useState('example.js');
  const [code, setCode] = useState('// Your code here');
  const [backgroundType, setBackgroundType] = useState<BackgroundType>('gradient');
  const [gradient, setGradient] = useState(gradients[0].value);
  const [solidColor, setSolidColor] = useState('#ffffff');
  const [backgroundImage, setBackgroundImage] = useState<string | null>(null);
  const [layout, setLayout] = useState('compact');
  const [watermark, setWatermark] = useState(false);
  const [watermarkText, setWatermarkText] = useState('Generated by Code to Image Converter');
  const [watermarkPosition, setWatermarkPosition] = useState<WatermarkPosition>('bottom-right');
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [fontFamily, setFontFamily] = useState(fontFamilies[0].value);
  const [fontSize, setFontSize] = useState(14);
  const [tabSize, setTabSize] = useState(2);
  const [imageQuality, setImageQuality] = useState(1);
  const [padding, setPadding] = useState(56);
  const [exportFormat, setExportFormat] = useState<ExportFormat>('png');
  const [customWidth, setCustomWidth] = useState(800);
  const [customHeight, setCustomHeight] = useState(600);
  const [useCustomSize, setUseCustomSize] = useState(false);
  const [showLineNumbers, setShowLineNumbers] = useState(false);

  const codeContainerRef = useRef(null);

  const handleExport = useCallback(async () => {
    if (codeContainerRef.current) {
      try {
        let dataUrl: string;
        const options = {
          quality: 1,
          pixelRatio: imageQuality,
          skipAutoScale: true,
          style: {
            transform: 'scale(1)',
            transformOrigin: 'top left',
          },
          width: useCustomSize ? customWidth : undefined,
          height: useCustomSize ? customHeight : undefined,
        };

        switch (exportFormat) {
          case 'jpeg':
            dataUrl = await toJpeg(codeContainerRef.current, options);
            break;
          case 'svg':
            dataUrl = await toSvg(codeContainerRef.current, options);
            break;
          default:
            dataUrl = await toPng(codeContainerRef.current, options);
        }
        
        const link = document.createElement('a');
        link.download = `${fileName.split('.')[0]}_code.${exportFormat}`;
        link.href = dataUrl;
        link.click();
        toast.success('Image exported successfully!');
      } catch (error) {
        console.error('Error exporting image:', error);
        toast.error('Failed to export image. Please try again.');
      }
    }
  }, [codeContainerRef, imageQuality, fileName, exportFormat, useCustomSize, customWidth, customHeight]);

 // Top bar component for quick settings
 const QuickSettings = () => (
  <div className="flex flex-col md:flex-row gap-4">
    <Select
      label="Language"
      selectedKeys={[language]}
      onChange={(e) => setLanguage(e.target.value)}
      className="flex-1 text-default-700"
      variant='bordered'
    >
      {languages.map((lang) => (
        <SelectItem key={lang.value} value={lang.value} className="text-default-700">
          {lang.label}
        </SelectItem>
      ))}
    </Select>
    
    <Select
      label="Theme"
      selectedKeys={[theme]}
      onChange={(e) => setTheme(e.target.value)}
      className="flex-1 text-default-700"
      variant='bordered'
    >
      {themes.map((t) => (
        <SelectItem key={t.value} value={t.value} className="text-default-700">
          {t.label}
        </SelectItem>
      ))}
    </Select>
    
    <Input
      label="File Name"
      value={fileName}
      onChange={(e) => setFileName(e.target.value)}
      className="flex-1 text-default-700"
      variant='bordered'
    />
  </div>
); 

  const handleCopyToClipboard = useCallback(async () => {
    if (codeContainerRef.current) {
      try {
        const dataUrl = await toPng(codeContainerRef.current, {
          quality: 1,
          pixelRatio: imageQuality,
          skipAutoScale: true,
          style: {
            transform: 'scale(1)',
            transformOrigin: 'top left',
          },
          width: useCustomSize ? customWidth : undefined,
          height: useCustomSize ? customHeight : undefined,
        });
        
        const response = await fetch(dataUrl);
        const blob = await response.blob();
        await navigator.clipboard.write([
          new ClipboardItem({ 'image/png': blob })
        ]);
        toast.success('Image copied to clipboard!');
      } catch (error) {
        toast.error('Failed to copy image to clipboard. Please try again.');
      }
    }
  }, [codeContainerRef, imageQuality, useCustomSize, customWidth, customHeight]);


  const getThemeStyle = (themeName: string) => {
    return (prismStyles as Record<string, { [key: string]: React.CSSProperties }>)[themeName] || prismStyles.atomDark;
  };

  const handleBackgroundImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setBackgroundImage(e.target?.result as string);
        setBackgroundType('image');
      };
      reader.readAsDataURL(file);
    }
  };

  const handleBackgroundImageURL = (event: React.ChangeEvent<HTMLInputElement>) => {
    setBackgroundImage(event.target.value);
    setBackgroundType('image');
  };

  const handleShuffleImage = () => {
    const randomId = Math.floor(Math.random() * 1000);
    const newImageUrl = `https://picsum.photos/seed/${randomId}/600/400`;
    setBackgroundImage(newImageUrl);
    setBackgroundType('image');
  };

  useEffect(() => {
    const loadFonts = async () => {
      const fonts = {
        "Source Code Pro": "Source+Code+Pro:wght@400;700",
        "Fira Code": "Fira+Code:wght@400;700",
        "JetBrains Mono": "JetBrains+Mono:wght@400;700",
        "Ubuntu Mono": "Ubuntu+Mono:wght@400;700",
        "Inconsolata": "Inconsolata:wght@400;700",
        "Roboto Mono": "Roboto+Mono:wght@400;700",
        "Anonymous Pro": "Anonymous+Pro:wght@400;700",
        "Space Mono": "Space+Mono:wght@400;700",
        "IBM Plex Mono": "IBM+Plex+Mono:wght@400;700",
      };
  
      for (const fontPath of Object.values(fonts)) {
        const link = document.createElement("link");
        link.href = `https://fonts.googleapis.com/css2?family=${fontPath}&display=swap`;
        link.rel = "stylesheet";
        document.head.appendChild(link);
      }
    };
  
    loadFonts();
  }, []);
  
  const renderFullscreenPreview = () => (
    <Modal
      isOpen={isFullscreen}
      onOpenChange={setIsFullscreen}
      size="full"
      classNames={{
        base: "bg-black/50 backdrop-blur-md",
        wrapper: "max-w-full h-full",
      }}
    >
      <ModalContent>
        {(onClose) => (
          <div className="relative w-full h-full flex items-center justify-center p-4">
            <Button
              isIconOnly
              variant="flat"
              color="danger"
              onPress={onClose}
              className="absolute top-4 right-4 z-50"
            >
              <X className="w-6 h-6" />
            </Button>
            <CodePreview
              ref={codeContainerRef}
              code={code}
              onCodeChange={setCode}
              language={language}
              theme={theme}
              fileName={fileName}
              backgroundType={backgroundType}
              gradient={gradient}
              solidColor={solidColor}
              backgroundImage={backgroundImage}
              watermark={watermark}
              watermarkText={watermarkText}
              watermarkPosition={watermarkPosition}
              padding={padding}
              fontFamily={fontFamily}
              fontSize={fontSize}
              showLineNumbers={showLineNumbers}
              isFullscreen={true}
            />
          </div>
        )}
      </ModalContent>
    </Modal>
  );



  return (
    <ToolLayout
      title="Code to Image Converter"
      description="Transform your code snippets into beautiful, shareable images with syntax highlighting and customizable styles."
      toolId="678f382e26f06f912191bcb6"
    >
      <div className="flex flex-col gap-6">
        <QuickSettings />
        
        <Card className="bg-default-50 dark:bg-default-100">
          <CardBody className="p-6">
            <div className="relative">
              <div className="absolute top-4 right-4 z-10">
                <Button 
                  isIconOnly 
                  variant="flat" 
                  color="primary" 
                  onClick={() => setIsFullscreen(true)}
                >
                  <Maximize2 className="w-5 h-5" />
                </Button>
              </div>
              <CodePreview
                ref={codeContainerRef}
                code={code}
                onCodeChange={setCode}
                language={language}
                theme={theme}
                fileName={fileName}
                backgroundType={backgroundType}
                gradient={gradient}
                solidColor={solidColor}
                backgroundImage={backgroundImage}
                watermark={watermark}
                watermarkText={watermarkText}
                watermarkPosition={watermarkPosition}
                padding={padding}
                fontFamily={fontFamily}
                fontSize={fontSize}
                showLineNumbers={showLineNumbers}
              />
            </div>
          </CardBody>
        </Card>

       

        {/* Style Options */}
        <Card className="bg-default-50 dark:bg-default-100">
          <CardBody className="p-6">
            <Tabs aria-label="Code to Image options">
            <Tab 
              key="style" 
              title={
                <div className="flex items-center gap-2">
                  <Palette className="w-4 h-4" />
                  <span>Style</span>
                </div>
              }
            >
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 p-6">
                {/* Background Settings Column */}
                <div className="space-y-6">
                  <h3 className="text-lg font-medium text-default-900">Background</h3>
                  
                  <div>
                    <p className="text-default-700 mb-2">Background Type</p>
                    <Select
                      selectedKeys={[backgroundType]}
                      onChange={(e) => setBackgroundType(e.target.value as BackgroundType)}
                      variant="bordered"
                      className="w-full"
                    >
                      <SelectItem key="none" value="none" className="text-default-700">None</SelectItem>
                      <SelectItem key="gradient" value="gradient" className="text-default-700">Gradient</SelectItem>
                      <SelectItem key="solid" value="solid" className="text-default-700">Solid Color</SelectItem>
                      <SelectItem key="image" value="image" className="text-default-700">Image</SelectItem>
                    </Select>
                  </div>

                  {backgroundType === 'gradient' && (
                    <div>
                      <p className="text-default-700 mb-2">Gradient</p>
                      <Select
                        selectedKeys={[gradient]}
                        onChange={(e) => setGradient(e.target.value)}
                        variant="bordered"
                        className="w-full"
                      >
                        {gradients.map((g) => (
                          <SelectItem key={g.value} value={g.value} className="text-default-700">
                            {g.label}
                          </SelectItem>
                        ))}
                      </Select>
                    </div>
                  )}

                  {backgroundType === 'solid' && (
                    <div>
                      <p className="text-default-700 mb-2">Color</p>
                      <Input
                        type="color"
                        value={solidColor}
                        variant="bordered"
                        className="w-24"
                        onChange={(e) => setSolidColor(e.target.value)}
                      />
                    </div>
                  )}

                  {backgroundType === 'image' && (
                    <div className="space-y-3">
                      <p className="text-default-700 mb-2">Background Image</p>
                      <Input
                        type="file"
                        onChange={handleBackgroundImageUpload}
                        variant="bordered"
                        accept="image/*"
                        className="w-full"
                      />
                      <Input
                        type="text"
                        placeholder="Or enter image URL"
                        variant="bordered"
                        onChange={handleBackgroundImageURL}
                        className="w-full"
                      />
                      <Button
                        color="primary"
                        onClick={handleShuffleImage}
                        startContent={<RefreshCw className="w-4 h-4" />}
                        className="w-full"
                      >
                        Random Image
                      </Button>
                    </div>
                  )}
                </div>

                {/* Typography & Layout Settings Column */}
                <div className="space-y-6">
                  <h3 className="text-lg font-medium text-default-900">Typography & Layout</h3>
                  
                  <div>
                    <p className="text-default-700 mb-2">Font Family</p>
                    <Select
                      selectedKeys={[fontFamily]}
                      onChange={(e) => setFontFamily(e.target.value)}
                      variant="bordered"
                      className="w-full"
                    >
                      {fontFamilies.map((font) => (
                        <SelectItem key={font.value} value={font.value} className="text-default-700">
                          {font.label}
                        </SelectItem>
                      ))}
                    </Select>
                  </div>

                  <div>
                    <p className="text-default-700 mb-2">Font Size: {fontSize}px</p>
                    <Slider
                      value={fontSize}
                      onChange={(value) => setFontSize(value as number)}
                      minValue={8}
                      maxValue={24}
                      step={1}
                      className="w-full"
                    />
                  </div>

                  <div>
                    <p className="text-default-700 mb-2">Padding: {padding}px</p>
                    <Slider
                      value={padding}
                      onChange={(value) => setPadding(value as number)}
                      minValue={0}
                      maxValue={64}
                      step={4}
                      className="w-full"
                    />
                  </div>

                  <div className="flex items-center gap-2">
                    <Switch
                      isSelected={showLineNumbers}
                      onValueChange={setShowLineNumbers}
                    />
                    <p className="text-default-700">Show Line Numbers</p>
                  </div>
                </div>
              </div>
            </Tab>

              <Tab 
                key="settings" 
                title={
                  <div className="flex items-center gap-2">
                    <Settings className="w-4 h-4" />
                    <span>Settings</span>
                  </div>
                }
              >
                <div className="space-y-4 py-4">
                  <div>
                    <p className="text-default-700 mb-2">Layout</p>
                    <Select
                      selectedKeys={[layout]}
                      onChange={(e) => setLayout(e.target.value)}
                      variant='bordered'
                    >
                      <SelectItem key="compact" value="compact" className="text-default-700">Compact</SelectItem>
                      <SelectItem key="square" value="square" className="text-default-700">Square</SelectItem>
                      <SelectItem key="wide" value="wide" className="text-default-700">Wide</SelectItem>
                    </Select>
                  </div>

                  <div>
                    <p className="text-default-700 mb-2">Tab Size: {tabSize} spaces</p>
                    <Slider
                        value={tabSize}
                        onChange={(value) => setTabSize(value as number)}
                        minValue={2}
                        maxValue={8}
                        step={2}
                        />

                  </div>

                  <div className="flex items-center gap-2">
                    <Switch
                      isSelected={watermark}
                      onValueChange={setWatermark}
                    />
                    <p className="text-default-700">Show Watermark</p>
                  </div>

                  {watermark && (
                    <>
                      <div>
                        <p className="text-default-700 mb-2">Watermark Text</p>
                        <Input
                          value={watermarkText}
                          onChange={(e) => setWatermarkText(e.target.value)}
                          variant='bordered'
                        />
                      </div>
                      <div>
                        <p className="text-default-700 mb-2">Watermark Position</p>
                        <Select
                          selectedKeys={[watermarkPosition]}
                          onChange={(e) => setWatermarkPosition(e.target.value as WatermarkPosition)}
                          variant='bordered'
                        >
                          <SelectItem key="top-left" value="top-left">Top Left</SelectItem>
                          <SelectItem key="top-right" value="top-right">Top Right</SelectItem>
                          <SelectItem key="bottom-left" value="bottom-left">Bottom Left</SelectItem>
                          <SelectItem key="bottom-right" value="bottom-right">Bottom Right</SelectItem>
                        </Select>
                      </div>
                    </>
                  )}
                </div>
              </Tab>

              <Tab 
                key="export" 
                title={
                  <div className="flex items-center gap-2">
                    <Download className="w-4 h-4" />
                    <span>Export</span>
                  </div>
                }
              >
                <div className="space-y-4 py-4">
                  <div>
                    <p className="text-default-700 mb-2">Export Format</p>
                    <Select
                      selectedKeys={[exportFormat]}
                      onChange={(e) => setExportFormat(e.target.value as ExportFormat)}
                      variant='bordered'
                    >
                      <SelectItem key="png" value="png" className="text-default-700">PNG</SelectItem>
                      <SelectItem key="jpeg" value="jpeg" className="text-default-700">JPEG</SelectItem>
                      <SelectItem key="svg" value="svg" className="text-default-700">SVG</SelectItem>
                    </Select>
                  </div>

                  <div className="flex items-center gap-2">
                    <Switch
                      isSelected={useCustomSize}
                      onValueChange={setUseCustomSize}
                    />
                    <p className="text-default-700">Use Custom Size</p>
                  </div>

                  {useCustomSize && (
                    <>
                      <div className="flex flex-col lg:flex-row gap-4">
                        <div className="flex-1">
                            <p className="text-default-700 mb-2">Width (px)</p>
                            <Input
                            type="number"
                            value={customWidth.toString()}
                            onChange={(e) => setCustomWidth(Number(e.target.value))}
                            variant="bordered"
                            />
                        </div>
                        <div className="flex-1">
                            <p className="text-default-700 mb-2">Height (px)</p>
                            <Input
                            type="number"
                            value={customHeight.toString()}
                            onChange={(e) => setCustomHeight(Number(e.target.value))}
                            variant="bordered"
                            />
                        </div>
                        </div>

                    </>
                  )}

                  <div>
                    <p className="text-default-700 mb-2">Image Quality: {imageQuality}x</p>
                    <Slider
                    value={imageQuality}
                    onChange={(value) => setImageQuality(value as number)}
                    minValue={1}
                    maxValue={4}
                    step={1}
                    />

                  </div>
                </div>
              </Tab>
            </Tabs>
            <div className="flex flex-wrap gap-2 mt-4">
              <Button
                color="success"
                onClick={handleExport}
                startContent={<Download className="w-4 h-4" />}
              >
                Export Image
              </Button>
              <Button
                color="secondary"
                onClick={handleCopyToClipboard}
                startContent={<Copy className="w-4 h-4" />}
              >
                Copy to Clipboard
              </Button>
            </div>
          </CardBody>
          
        </Card>
        

        {/* Info Section */}
         {/* Info Section */}
         <Card className="bg-default-50 dark:bg-default-100 p-4 md:p-8">
          <CardBody>
            <h2 className="text-xl md:text-2xl font-semibold text-default-700 mb-4 flex items-center">
              <Info className="w-6 h-6 mr-2" />
              What is the Code to Image Converter?
            </h2>
            <p className="text-sm md:text-base text-default-600 mb-4">
              The Code to Image Converter is a powerful tool designed to transform your code snippets into visually
              appealing and shareable images. It's perfect for developers, programmers, and educators who want to
              showcase their code in a more engaging and professional manner.
            </p>
            <p className="text-sm md:text-base text-default-600 mb-4">
              Whether you're creating tutorials, sharing on social media, or enhancing your documentation, our Code to
              Image Converter provides you with a range of customization options to make your code stand out.
            </p>

            <h2
              id="how-to-use"
              className="text-xl md:text-2xl font-semibold text-default-700 mb-4 mt-8 flex items-center"
            >
              <BookOpen className="w-6 h-6 mr-2" />
              How to Use the Code to Image Converter?
            </h2>
            <ol className="list-decimal list-inside space-y-2 text-sm md:text-base">
              <li>Enter or paste your code into the provided text area.</li>
              <li>Select the programming language for proper syntax highlighting.</li>
              <li>Choose a theme that complements your code and preferences.</li>
              <li>Customize the background, font, and other styling options as desired.</li>
              <li>Adjust export settings such as image format and social media size.</li>
              <li>Preview your code image in real-time as you make adjustments.</li>
              <li>Click the "Export Image" button to download your code as an image file.</li>
              <li>Alternatively, use the "Copy to Clipboard" feature for quick sharing.</li>
            </ol>

            <h2 className="text-xl md:text-2xl font-semibold text-default-700 mb-4 mt-8 flex items-center">
              <Lightbulb className="w-6 h-6 mr-2" />
              Key Features
            </h2>
            <ul className="list-disc list-inside space-y-2 text-sm md:text-base">
              <li>Support for multiple programming languages with syntax highlighting</li>
              <li>Wide range of themes to suit different visual preferences</li>
              <li>Customizable backgrounds including gradients and solid colors</li>
              <li>Font customization options</li>
              <li>Export in multiple formats (PNG, JPEG, SVG)</li>
              <li>Social media size presets for optimal sharing</li>
              <li>Optional watermark with customizable text</li>
              <li>Adjustable padding and font size</li>
              <li>Real-time preview of the generated image</li>
              <li>Fullscreen preview mode for detailed inspection</li>
              <li>One-click copy to clipboard functionality</li>
            </ul>
          </CardBody>
        </Card>

        </div>
      {renderFullscreenPreview()}

    </ToolLayout>
  );
}

export default CodeToImageConverter;